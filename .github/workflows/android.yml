# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    services:
      emulator:
        image: androidsdk/android-33
        options: >-
          --network=host
        ports:
          - 5554:5554
          - 5555:5555

    env:
      # Déclaration des variables d'environnement

      # Secrets pour la signature : Déclarer dans GitHub -> mon repo -> Settings -> Actions secrets and variables
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      # API Map google
      MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}

      # json Firebase => pas besoin de variable d'environnement, il faut juste créer le fichier sur l'environnement CI
      # KEY_GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.KEY_GOOGLE_SERVICES_JSON_BASE64 }}

    # Différentes étapes
    steps:
      # Clone le depot
      - uses: actions/checkout@v4

      # Installe Java 11 (requis pour Android et SonarQube).
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # Télécharge le fichier google-services.json (présent dans les secrets GitHub Action)
      - name: Load Google Service file
        run:
          echo "${{ secrets.KEY_GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > app/google-services.json

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build the project and sign APK
        run: ./gradlew assembleRelease -PstoreFile=$HOME/keystore.jks -PstorePassword=${{ secrets.KEYSTORE_PASSWORD }} -PkeyAlias=${{ secrets.KEY_ALIAS }} -PkeyPassword=${{ secrets.KEY_PASSWORD }}

        # Run Unit test
      - name: Run unit tests
        run: ./gradlew test
        continue-on-error: true  # Permet de continuer même si les tests échouent

      # Permet de déposer un fichier dans le compte-rendu du gitHub Action
      - name: Upload unit test reports
        #if: failure() # Pour uploader uniquement si les tests échouent
        if: always() # always run even if the tests fail
        uses: actions/upload-artifact@v4
        with:
            name: unit-test-reports
            path: app/build/reports/tests/testReleaseUnitTest/


      - name: Set up Android SDK
        uses: reactions/setup-android-sdk@v1

      - name: Start Emulator
        run: |
          echo "Starting emulator"
          $ANDROID_HOME/emulator/emulator -avd "Medium Phone API 33" -no-window -no-audio &

      - name: Wait for emulator to boot
        run: |
              $ANDROID_HOME/platform-tools/adb wait-for-device
              $ANDROID_HOME/platform-tools/adb shell input keyevent 82 & # unlock screen

      # Run instrumented test
      - name: Run instrumented tests
        run: ./gradlew connectedAndroidTest
        continue-on-error: true  # Permet de continuer même si les tests échouent

      # Permet de déposer un fichier dans le compte-rendu du gitHub Action
      - name: Upload instrumented test reports
        #if: failure() # Pour uploader uniquement si les tests échouent
        if: always() # always run even if the tests fail
        uses: actions/upload-artifact@v4
        with:
            name: instrumented-test-reports
            path: app/build/reports/androidTests/connected/release/


