# Build / Passage des tests unitaires / des tests instrumentés / SonarQube Scan
name: Continuous Integration - tests

# TODO Denis P16 => Warning : The following actions use a deprecated Node.js version and will be forced to run on node20: actions/setup-java@v3"

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      # Déclaration des variables d'environnement

      # Secrets pour la signature : Déclarer dans GitHub -> mon repo -> Settings -> Actions secrets and variables
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      # API Map google
      MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}

      # json Firebase => pas besoin de variable d'environnement, il faut juste créer le fichier sur l'environnement CI
      # KEY_GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.KEY_GOOGLE_SERVICES_JSON_BASE64 }}

      TOKEN_SONAR_CLOUD: ${{ secrets.TOKEN_SONAR_CLOUD }}

    # Différentes étapes
    steps:
      # Clone le depot
      - uses: actions/checkout@v4

      # Installe Java 11 (requis pour Android et SonarQube).
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # Télécharge le fichier google-services.json (présent dans les secrets GitHub Action)
      - name: Load Google Service file
        run:
          echo "${{ secrets.KEY_GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > app/google-services.json

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      #- name: Build the project and sign APK
      #  run: ./gradlew assembleRelease -PstoreFile=$HOME/keystore.jks -PstorePassword=${{ secrets.KEYSTORE_PASSWORD }} -PkeyAlias=${{ secrets.KEY_ALIAS }} -PkeyPassword=${{ secrets.KEY_PASSWORD }}

      - name: Build
        run: ./gradlew build


        # Run Unit test
      - name: Run unit tests
        run: ./gradlew test
        continue-on-error: true  # Permet de continuer même si les tests échouent

      # Permet de déposer un fichier dans le compte-rendu du gitHub Action
      - name: Upload unit test reports
        #if: failure() # Pour uploader uniquement si les tests échouent
        if: always() # always run even if the tests fail
        uses: actions/upload-artifact@v4
        with:
            name: unit-test-reports
            path: app/build/reports/tests/testReleaseUnitTest/


      #- name: Set up Android SDK
      #  uses: react-native-community/setup-android@v1.1.0  # Vérifiez la dernière version

      # KVM permet à l'émulateur de s'exécuter plus rapidement et de manière plus efficace en utilisant la virtualisation matérielle. Cela réduit considérablement le temps nécessaire pour lancer et exécuter des tests.
      - name: Enable KVM
        run: |
            echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
            sudo udevadm control --reload-rules
            sudo udevadm trigger --name-match=kvm

      # https://github.com/marketplace/actions/android-emulator-runner
      - name: Android Emulator Runner and launch instrumented test
        uses: ReactiveCircus/android-emulator-runner@v2.32.0
        with:
          api-level: 33                                 # Niveau de l'API à utiliser
          arch: x86_64                                  # Architecture de l'AVD (x86 ou x86_64)
          emulator-boot-timeout: 300                    # Augmenter le délai d'attente à 300 secondes (5 minutes)
          disable-animations: true
          enable-hw-keyboard: true
          # gpu: swiftshader_indirect  # Utiliser swiftshader pour le rendu logiciel

          #script: ./gradlew connectedCheck   # Commande pour exécuter les tests instrumentés
          #script: ./gradlew connectedDebugAndroidTest   # Commande pour exécuter les tests instrumentés
          script: |
            adb wait-for-device               # Attendre que l'émulateur soit prêt
            adb shell input keyevent 82       # Simuler un appui sur le bouton 'home' pour "réveiller" l'émulateur
            ./gradlew connectedDebugAndroidTest jacocoTestReport # Lancer les tests avec rapport de couverture

      # Permet de déposer un fichier dans le compte-rendu du gitHub Action
      - name: Upload instrumented test reports
        #if: failure() # Pour uploader uniquement si les tests échouent
        if: always() # always run even if the tests fail
        uses: actions/upload-artifact@v4
        with:
            name: instrumented-test-reports
            path: app/build/reports/androidTests/connected/debug/


      - name: Upload JaCoCo report - Code coverage
        uses: actions/upload-artifact@v4
        with:
            name: jacoco-report
            path: app/build/reports/coverage/androidTest/debug/connected/report.xml

      # https://github.com/marketplace/actions/sonarqube-quality-gate-check
      # Les quality gates permettent de vérifier la qualité du code selon plusieurs critères (duplication de code, couverture...)
        #- name: SonarQube Scan
        #  if: always() # always run even if the tests fail
        #  uses: SonarSource/sonarqube-scan-action@v3.0.0
          #  env:
          #    SONAR_TOKEN: ${{ secrets.TOKEN_SONAR_CLOUD }} # Récupération sécurisée du token
          #    SONAR_HOST_URL: "https://sonarcloud.io"       # URL du serveur SonarCloud


      - name: Run Sonar analysis
        run: ./gradlew sonar
        env:
            SONAR_TOKEN: ${{ secrets.TOKEN_SONAR_CLOUD }} # Assurez-vous que le token est ajouté dans les secrets de votre repository